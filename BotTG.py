from ping3 import ping
import config
from  config import server, database, username, password, TOKEN
import telebot
import time
import threading
import os
import subprocess
import sqlite3
import pyodbc
from pythonping import ping
import threading
import requests

bot = telebot.TeleBot(config.token)  # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º

is_running = False # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è


def check_ping(chat_id, ip_address): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É IP-–∞–¥—Ä–µ—Å—É
    time.sleep(3)
    global is_running
    is_running = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    while is_running:  # –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏–Ω–≥–∞ (–ø–æ–∫–∞ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True)
        if ping(ip_address) is None:   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –ø–æ –∞–¥—Ä–µ—Å—É
            bot.send_message(chat_id, f'–°–µ—Ä–≤–µ—Ä {ip_address} –û—Ñ–ª–∞–π–Ω') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
        else:
            bot.send_message(chat_id, f'–°–µ—Ä–≤–µ—Ä {ip_address} –û–Ω–ª–∞–π–Ω') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞

        time.sleep(2)


def check_ping_2(chat_id, ip_address):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É IP-–∞–¥—Ä–µ—Å—É
    time.sleep(3)
    global is_running
    is_running = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    counter = 0  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
    while is_running and counter < 4:  # –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏–Ω–≥–∞ (–ø–æ–∫–∞ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True –∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 4 –∏—Ç–µ—Ä–∞—Ü–∏–∏)
        if ping(ip_address) is None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –ø–æ –∞–¥—Ä–µ—Å—É
            bot.send_message(chat_id, f'–°–µ—Ä–≤–µ—Ä {ip_address} –û—Ñ–ª–∞–π–Ω')  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
        else:
            bot.send_message(chat_id, f'–°–µ—Ä–≤–µ—Ä {ip_address} –û–Ω–ª–∞–π–Ω')  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞

        counter += 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
        time.sleep(2)

    bot.send_message(chat_id, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')  # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
def trace_route(chat_id, ip_address):
    global is_running

    if is_running:
        bot.send_message(chat_id, "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    is_running = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞

    try:
        if config.operating_system == 'Windows':
            result = subprocess.run(['tracert', '-d', ip_address], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                    text=True, encoding='cp866')
        elif config.operating_system == 'Linux':
            result = subprocess.run(['traceroute', '-d', ip_address], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                    text=True)

        trace_result = result.stdout
        bot.send_message(chat_id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è {ip_address}:\n{trace_result}')  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    except Exception as e:
        bot.send_message(chat_id, f'An error occurred during traceroute: {e}')
    finally:
        is_running = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º






bot = telebot.TeleBot(TOKEN)

ping_processes = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–∏–Ω–≥–∞

def ping_ip_by_id(message):
    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()
    cursor.execute("SELECT ID, IP FROM Ping3")
    ip_data = {row.ID: row.IP for row in cursor.fetchall()}
    conn.close()

    keyboard = telebot.types.InlineKeyboardMarkup()
    for id, ip in ip_data.items():
        keyboard.add(telebot.types.InlineKeyboardButton(text=f"ID: {id} - IP: {ip}", callback_data=str(id)))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ ID –¥–ª—è –ø–∏–Ω–≥–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å IP:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ ID –¥–ª—è –ø–∏–Ω–≥–∞
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    id_to_ping = int(call.data)
    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()
    cursor.execute("SELECT IP FROM Ping3 WHERE ID = ?", id_to_ping)
    ip = cursor.fetchone().IP
    conn.close()

    bot.send_message(call.message.chat.id, f"–ü–∏–Ω–≥ ID: {id_to_ping}, IP: {ip}")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è
    ping_processes[id_to_ping] = threading.Thread(target=ping_worker, args=(call.message.chat.id, id_to_ping, ip))
    ping_processes[id_to_ping].start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "ping"
@bot.message_handler(commands=['ping'])
def ping_start(message):
    ping_ip_by_id(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def ping_worker(chat_id, id_to_ping, ip):
    while id_to_ping in ping_processes:  # –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–∞, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        result = subprocess.call(["ping", "-c", "1", ip])
        if result == 0:
            bot.send_message(chat_id, f"ID: {id_to_ping}, IP: {ip} –û–Ω–ª–∞–π–Ω")
        else:
            bot.send_message(chat_id, f"ID: {id_to_ping}, IP: {ip} –û—Ñ–ª–∞–π–Ω")
        time.sleep(3)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "stop_ping"
@bot.message_handler(commands=['stop_ping'])
def stop_ping(message):
    for id, process in list(ping_processes.items()):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ–ø–∏–∏ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        del ping_processes[id]  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ
        bot.send_message(message.chat.id, f"–ü–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")




@bot.message_handler(commands=['ping_2']) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞
def start_ping(message):
    global is_running # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if not is_running:
        try:
            ip_address = message.text.split()[1]  # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            threading.Thread(target=check_ping_2, args=(message.chat.id, ip_address)).start()  # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            bot.send_message(message.chat.id, f"–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –¥–ª—è {ip_address}")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        except IndexError:
            bot.send_message(message.chat.id, "–ù–µ —É–∫–∞–∑–∞–Ω IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")   # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞") # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞

@bot.message_handler(commands=['trace'])
def start_trace(message):
    global is_running
    if not is_running:
        try:
            ip_address = message.text.split()[1]
            threading.Thread(target=trace_route, args=(message.chat.id, ip_address)).start()
            bot.send_message(message.chat.id, f"–ù–∞—á–∞—Ç–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è {ip_address}, –û–∂–∏–¥–∞–π—Ç–µ")
        except IndexError:
            bot.send_message(message.chat.id, "–ù–µ —É–∫–∞–∑–∞–Ω IP-–∞–¥—Ä–µ—Å –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏")
    else:
        bot.send_message(message.chat.id, "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")

@bot.message_handler(commands=['stop_trace'])
def stop_trace(message):
    global is_running
    is_running = False
    bot.send_message(message.chat.id, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞")



@bot.message_handler(commands=['staff'])
def get_staff_table(message):
    conn = pyodbc.connect(
        'DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    cursor.execute("select Tab1.ID_sot, Tab1.–§–ò–û,job_title1.–î–æ–ª–∂–Ω–æ—Å—Ç—å AS –î–æ–ª–∂–Ω–æ—Å—Ç—å_–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, Otdel.–û—Ç–¥–µ–ª AS OTDEL from Tab1 JOIN job_title1 on Tab1.ID_dol = job_title1.ID JOIN Otdel on Tab1.ID_otdel = Otdel.ID")
    rows = cursor.fetchall()

    staff_table = "Tab1:\n"
    for row in rows:
        staff_table += "ID‚Ññ: {}, –§–ò–û: {}, –î–æ–ª-—Ç—å: {}, –û—Ç–¥–µ–ª: {}\n".format(row[0], row[1], row[2], row[3])

    conn.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç Telegram
    bot.reply_to(message, staff_table)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start"
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_message = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è IP –∞–¥—Ä–µ—Å–æ–≤üòé
    –í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —è —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—åüí™
    /ping - –ü–∏–Ω–≥
    /ping_2 - –û—Ç–ø—Ä–∞–≤–∫–∞ 4 –ø–∞–∫–µ—Ç–æ–≤
    /trace - –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
    /stop_ping - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏–Ω–≥–∞
    /stop_trace - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    /staff - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    /add_staff - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    /delete_staff - –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    /update_staff - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    """
    bot.reply_to(message, welcome_message)


@bot.message_handler(commands=['add_staff'])
def add_staff_message(message):
    sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID:")
    bot.register_next_step_handler(sent, add_staff_id)

def add_staff_id(message):
    id = message.text
    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Tab1 WHERE ID_sot = ?", id)
    if cursor.fetchone():
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        conn.close()
    else:
        sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        bot.register_next_step_handler(sent, lambda message: add_staff_name(message, id))

def add_staff_name(message, id):
    name = message.text
    sent = bot.send_message(message.chat.id, """
    –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:
    0-–°—Ç—É–¥–µ–Ω—Ç
    1-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
    2-–°–≤—è–∑–∏—Å—Ç
    3-–°–∏—Å–∞–¥–º–∏–Ω
    4-–°–µ–∫—Ä–µ—Ç–∞—Ä—å
    5-–î–∏—Ä–µ–∫—Ç–æ—Ä
    6-–ú–µ–Ω–µ–¥–∂–µ—Ä
    """)
    bot.register_next_step_handler(sent, lambda message: add_staff_position(message, id, name))

def add_staff_position(message, id, name):
    position = message.text
    sent = bot.send_message(message.chat.id, """
    –í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª:
    0-IT –æ—Ç–¥–µ–ª
    1-–û—Ç–¥–µ–ª –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º 
    2-–°–µ—Ç–µ–≤–æ–π –æ—Ç–¥–µ–ª 
    3-–û—Ç–¥–µ–ª –∑–∞–∫—É–ø–æ–∫ 
    4-–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª
    5-–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –æ—Ç–¥–µ–ª 
    6-–û—Ç–¥–µ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """)
    bot.register_next_step_handler(sent, lambda message: add_staff_department(message, id, name, position))

def add_staff_department(message, id, name, position):
    department = message.text

    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()

    # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ IDENTITY_INSERT
    cursor.execute("SET IDENTITY_INSERT Tab1 ON")

    # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO Tab1 (ID_sot, –§–ò–û, ID_dol, ID_otdel) VALUES (?, ?, ?, ?)", id, name, position, department)

    # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ IDENTITY_INSERT
    cursor.execute("SET IDENTITY_INSERT Tab1 OFF")

    conn.commit()

    bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É")

    conn.close()





@bot.message_handler(commands=['delete_staff'])
def delete_staff_message(message):
    sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(sent, delete_staff_by_id)

def delete_staff_by_id(message):
    id = message.text

    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM Tab1 WHERE ID_sot = ?", id)
    if cursor.fetchone():
        cursor.execute("DELETE FROM Tab1 WHERE ID_sot = ?", id)
        conn.commit()
        bot.reply_to(message, f"–î–∞–Ω–Ω—ã–µ —Å ID {id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    else:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")

    conn.close()


@bot.message_handler(commands=['update_staff'])
def update_staff_start(message):
    update_staff_message(message)

def update_staff_message(message):
    sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    bot.register_next_step_handler(sent, update_staff_get_id)

def update_staff_get_id(message):
    id = message.text
    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM Tab1 WHERE ID_sot = ?", id)
    if cursor.fetchone():
        sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
        bot.register_next_step_handler(sent, lambda message: update_staff_name(message, id))
    else:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
        conn.close()

def update_staff_name(message, id):
    name = message.text
    sent = bot.send_message(message.chat.id, """
    –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:
    0-–°—Ç—É–¥–µ–Ω—Ç
    1-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
    2-–°–≤—è–∑–∏—Å—Ç
    3-–°–∏—Å–∞–¥–º–∏–Ω
    4-–°–µ–∫—Ä–µ—Ç–∞—Ä—å
    5-–î–∏—Ä–µ–∫—Ç–æ—Ä
    6-–ú–µ–Ω–µ–¥–∂–µ—Ä
    """)
    bot.register_next_step_handler(sent, lambda message: update_staff_position(message, id, name))

def update_staff_position(message, id, name):
    position = message.text
    sent = bot.send_message(message.chat.id, """
    –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª:
    0-IT –æ—Ç–¥–µ–ª
    1-–û—Ç–¥–µ–ª –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º 
    2-–°–µ—Ç–µ–≤–æ–π –æ—Ç–¥–µ–ª 
    3-–û—Ç–¥–µ–ª –∑–∞–∫—É–ø–æ–∫ 
    4-–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª
    5-–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –æ—Ç–¥–µ–ª 
    6-–û—Ç–¥–µ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ 
    """)
    bot.register_next_step_handler(sent, lambda message: update_staff_department(message, id, name, position))

def update_staff_department(message, id, name, position):
    department = message.text

    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = conn.cursor()

    cursor.execute("UPDATE Tab1 SET –§–ò–û = ?, ID_dol = ?, ID_otdel = ? WHERE ID_sot = ?", name, position, department, id)
    conn.commit()

    if cursor.rowcount > 0:
        bot.reply_to(message, f"–î–∞–Ω–Ω—ã–µ —Å ID {id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
    else:
        bot.reply_to(message, f"ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")

    conn.close()



bot.polling() # –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
